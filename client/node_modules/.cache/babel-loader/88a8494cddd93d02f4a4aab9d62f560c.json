{"ast":null,"code":"import { CreateIdPromiseThunk, createLoginPromiseThunk, userHandleAsyncActions, userReducerUtils } from \"../util/user_async_utils\";\nimport HttpClient from \"../network/http\";\nimport UserService from \"../api/user\";\nimport TokenStorage from \"../db/token\";\nconst baseUrl = \"http://localhost:8080\";\nconst httpClient = new HttpClient(baseUrl);\nconst tokenStorage = new TokenStorage();\nconst userService = new UserService(httpClient, tokenStorage);\nconst LOGIN_ID = \"LOGIN_ID\";\nconst LOGIN_ID_SUCCESS = \"LOGIN_ID_SUCCESS\";\nconst LOGIN_ID_ERROR = \"LOGIN_ID_ERROR\";\nconst LOGOUT_ID = \"LOGOUT_ID\";\nconst LOGOUT_ID_SUCCESS = \"LOGOUT_ID_SUCCESS\";\nconst LOGOUT_ID_ERROR = \"LOGOUT_ID_ERROR\";\nconst CREATE_ID = \"CREATE_ID\";\nconst CREATE_ID_SUCCESS = \"CREATE_ID_SUCCESS\";\nconst CREATE_ID_ERROR = \"CREATE_ID_ERROR\";\nexport const loginId = createLoginPromiseThunk(LOGIN_ID, userService.login);\nexport const logoutId = () => dipatch => {\n  dipatch({\n    type: LOGOUT_ID_SUCCESS\n  });\n};\nexport const createId = CreateIdPromiseThunk(CREATE_ID, userService.signUp);\nconst initialState = {\n  user: userReducerUtils.initial\n};\nexport default function users(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_ID:\n    case LOGIN_ID_SUCCESS:\n    case LOGIN_ID_ERROR:\n      return userHandleAsyncActions(LOGIN_ID, \"login\")(state, action);\n\n    case LOGOUT_ID:\n    case LOGOUT_ID_SUCCESS:\n    case LOGOUT_ID_ERROR:\n      return userHandleAsyncActions(LOGOUT_ID, \"logout\")(state, action);\n\n    case CREATE_ID:\n    case CREATE_ID_SUCCESS:\n    case CREATE_ID_ERROR:\n      return userHandleAsyncActions(CREATE_ID, \"login\")(state, action);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/module/user.js"],"names":["CreateIdPromiseThunk","createLoginPromiseThunk","userHandleAsyncActions","userReducerUtils","HttpClient","UserService","TokenStorage","baseUrl","httpClient","tokenStorage","userService","LOGIN_ID","LOGIN_ID_SUCCESS","LOGIN_ID_ERROR","LOGOUT_ID","LOGOUT_ID_SUCCESS","LOGOUT_ID_ERROR","CREATE_ID","CREATE_ID_SUCCESS","CREATE_ID_ERROR","loginId","login","logoutId","dipatch","type","createId","signUp","initialState","user","initial","users","state","action"],"mappings":"AAAA,SACEA,oBADF,EAEEC,uBAFF,EAGEC,sBAHF,EAIEC,gBAJF,QAKO,0BALP;AAMA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,UAAU,GAAG,IAAIJ,UAAJ,CAAeG,OAAf,CAAnB;AACA,MAAME,YAAY,GAAG,IAAIH,YAAJ,EAArB;AACA,MAAMI,WAAW,GAAG,IAAIL,WAAJ,CAAgBG,UAAhB,EAA4BC,YAA5B,CAApB;AAEA,MAAME,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,cAAc,GAAG,gBAAvB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,OAAO,MAAMC,OAAO,GAAGnB,uBAAuB,CAACU,QAAD,EAAWD,WAAW,CAACW,KAAvB,CAAvC;AAEP,OAAO,MAAMC,QAAQ,GAAG,MAAOC,OAAD,IAAa;AACzCA,EAAAA,OAAO,CAAC;AAAEC,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAP;AACD,CAFM;AAIP,OAAO,MAAMU,QAAQ,GAAGzB,oBAAoB,CAACiB,SAAD,EAAYP,WAAW,CAACgB,MAAxB,CAArC;AAEP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAEzB,gBAAgB,CAAC0B;AADJ,CAArB;AAIA,eAAe,SAASC,KAAT,CAAeC,KAAK,GAAGJ,YAAvB,EAAqCK,MAArC,EAA6C;AAC1D,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKb,QAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,cAAL;AACE,aAAOX,sBAAsB,CAACS,QAAD,EAAW,OAAX,CAAtB,CAA0CoB,KAA1C,EAAiDC,MAAjD,CAAP;;AACF,SAAKlB,SAAL;AACA,SAAKC,iBAAL;AACA,SAAKC,eAAL;AACE,aAAOd,sBAAsB,CAACY,SAAD,EAAY,QAAZ,CAAtB,CAA4CiB,KAA5C,EAAmDC,MAAnD,CAAP;;AACF,SAAKf,SAAL;AACA,SAAKC,iBAAL;AACA,SAAKC,eAAL;AACE,aAAOjB,sBAAsB,CAACe,SAAD,EAAY,OAAZ,CAAtB,CAA2Cc,KAA3C,EAAkDC,MAAlD,CAAP;;AACF;AACE,aAAOD,KAAP;AAdJ;AAgBD","sourcesContent":["import {\n  CreateIdPromiseThunk,\n  createLoginPromiseThunk,\n  userHandleAsyncActions,\n  userReducerUtils,\n} from \"../util/user_async_utils\";\nimport HttpClient from \"../network/http\";\nimport UserService from \"../api/user\";\nimport TokenStorage from \"../db/token\";\n\nconst baseUrl = \"http://localhost:8080\";\nconst httpClient = new HttpClient(baseUrl);\nconst tokenStorage = new TokenStorage();\nconst userService = new UserService(httpClient, tokenStorage);\n\nconst LOGIN_ID = \"LOGIN_ID\";\nconst LOGIN_ID_SUCCESS = \"LOGIN_ID_SUCCESS\";\nconst LOGIN_ID_ERROR = \"LOGIN_ID_ERROR\";\n\nconst LOGOUT_ID = \"LOGOUT_ID\";\nconst LOGOUT_ID_SUCCESS = \"LOGOUT_ID_SUCCESS\";\nconst LOGOUT_ID_ERROR = \"LOGOUT_ID_ERROR\";\n\nconst CREATE_ID = \"CREATE_ID\";\nconst CREATE_ID_SUCCESS = \"CREATE_ID_SUCCESS\";\nconst CREATE_ID_ERROR = \"CREATE_ID_ERROR\";\n\nexport const loginId = createLoginPromiseThunk(LOGIN_ID, userService.login);\n\nexport const logoutId = () => (dipatch) => {\n  dipatch({ type: LOGOUT_ID_SUCCESS });\n};\n\nexport const createId = CreateIdPromiseThunk(CREATE_ID, userService.signUp);\n\nconst initialState = {\n  user: userReducerUtils.initial,\n};\n\nexport default function users(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_ID:\n    case LOGIN_ID_SUCCESS:\n    case LOGIN_ID_ERROR:\n      return userHandleAsyncActions(LOGIN_ID, \"login\")(state, action);\n    case LOGOUT_ID:\n    case LOGOUT_ID_SUCCESS:\n    case LOGOUT_ID_ERROR:\n      return userHandleAsyncActions(LOGOUT_ID, \"logout\")(state, action);\n    case CREATE_ID:\n    case CREATE_ID_SUCCESS:\n    case CREATE_ID_ERROR:\n      return userHandleAsyncActions(CREATE_ID, \"login\")(state, action);\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}