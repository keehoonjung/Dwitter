{"ast":null,"code":"import * as tweetsAPI from \"../api/tweets\";\nimport { createPromiseThunk, createPromiseThunkById, handleAsyncActions, handleAsyncDeleteActions, handleAsyncPostActions, reducerUtils } from \"../util/async_utils\";\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst DELETE_TWEET_SUCCESS = \"DELETE_TWEET_SUCCESS\";\nconst DELETE_TWEET_ERROR = \"DELETE_TWEET_ERROR\";\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\nexport const getTweets = createPromiseThunk(GET_TWEETS, tweetsAPI.getTweets);\nexport const getTweet = createPromiseThunkById(GET_TWEET, tweetsAPI.getTweetById);\nexport const postTweet = createPromiseThunk(POST_TWEET, tweetsAPI.postTweet);\nexport const deleteTweet = createPromiseThunkById(DELETE_TWEET, tweetsAPI.deleteTweet);\nexport const updateTweet = (id, text) => async dispatch => {\n  try {\n    const payload = await tweetsAPI.updateTweet(id, text);\n    dispatch({\n      type: UPDATE_TWEET,\n      payload,\n      meta: id\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial()\n};\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncActions(GET_TWEETS, \"posts\")(state, action);\n\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncActions(GET_TWEET, \"post\")(state, action);\n\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return handleAsyncPostActions(POST_TWEET, \"posts\")(state, action);\n\n    case DELETE_TWEET:\n    case DELETE_TWEET_SUCCESS:\n    case DELETE_TWEET_ERROR:\n      return handleAsyncDeleteActions(DELETE_TWEET, \"delete\")(state, action);\n\n    case UPDATE_TWEET:\n      return { ...state,\n        posts: { ...state.posts,\n          data: state.posts.data ? state.posts.data.map(tweet => {\n            if (tweet.id !== action.meta) {\n              return tweet;\n            }\n\n            return action.payload;\n          }) : null\n        }\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/module/tweets.js"],"names":["tweetsAPI","createPromiseThunk","createPromiseThunkById","handleAsyncActions","handleAsyncDeleteActions","handleAsyncPostActions","reducerUtils","GET_TWEETS","GET_TWEETS_SUCCESS","GET_TWEETS_ERROR","GET_TWEET","GET_TWEET_SUCCESS","GET_TWEET_ERROR","POST_TWEET","POST_TWEET_SUCCESS","POST_TWEET_ERROR","DELETE_TWEET","DELETE_TWEET_SUCCESS","DELETE_TWEET_ERROR","UPDATE_TWEET","getTweets","getTweet","getTweetById","postTweet","deleteTweet","updateTweet","id","text","dispatch","payload","type","meta","e","console","log","initialState","posts","initial","post","tweets","state","action","data","map","tweet"],"mappings":"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","sourcesContent":["import * as tweetsAPI from \"../api/tweets\";\nimport {\n  createPromiseThunk,\n  createPromiseThunkById,\n  handleAsyncActions,\n  handleAsyncDeleteActions,\n  handleAsyncPostActions,\n  reducerUtils,\n} from \"../util/async_utils\";\n\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\n\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\n\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\n\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst DELETE_TWEET_SUCCESS = \"DELETE_TWEET_SUCCESS\";\nconst DELETE_TWEET_ERROR = \"DELETE_TWEET_ERROR\";\n\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\n\nexport const getTweets = createPromiseThunk(GET_TWEETS, tweetsAPI.getTweets);\nexport const getTweet = createPromiseThunkById(\n  GET_TWEET,\n  tweetsAPI.getTweetById\n);\nexport const postTweet = createPromiseThunk(POST_TWEET, tweetsAPI.postTweet);\nexport const deleteTweet = createPromiseThunkById(\n  DELETE_TWEET,\n  tweetsAPI.deleteTweet\n);\n\nexport const updateTweet = (id, text) => async (dispatch) => {\n  try {\n    const payload = await tweetsAPI.updateTweet(id, text);\n    dispatch({ type: UPDATE_TWEET, payload, meta: id });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial(),\n};\n\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncActions(GET_TWEETS, \"posts\")(state, action);\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncActions(GET_TWEET, \"post\")(state, action);\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return handleAsyncPostActions(POST_TWEET, \"posts\")(state, action);\n    case DELETE_TWEET:\n    case DELETE_TWEET_SUCCESS:\n    case DELETE_TWEET_ERROR:\n      return handleAsyncDeleteActions(DELETE_TWEET, \"delete\")(state, action);\n    case UPDATE_TWEET:\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          data: state.posts.data\n            ? state.posts.data.map((tweet) => {\n                if (tweet.id !== action.meta) {\n                  return tweet;\n                }\n                return action.payload;\n              })\n            : null,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}