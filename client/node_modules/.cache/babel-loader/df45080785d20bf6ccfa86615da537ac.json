{"ast":null,"code":"export const createPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    dispatch({\n      type\n    });\n\n    try {\n      const payload = await promiseCreator();\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true\n      });\n    }\n  };\n};\nexport const reducerUtils = {\n  initial: (initialData = null) => ({\n    loading: false,\n    data: null,\n    error: null\n  }),\n  loading: (prevState = null) => ({\n    loading: true,\n    data: prevState,\n    error: null\n  }),\n  success: payload => ({\n    loading: false,\n    data: payload,\n    error: null\n  }),\n  error: error => ({\n    loading: false,\n    data: null,\n    error: error\n  })\n};\nexport const handleAsyncActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return { ...state,\n          [key]: reducerUtils.loading()\n        };\n\n      case SUCCESS:\n        return { ...state,\n          [key]: reducerUtils.success(action.payload)\n        };\n\n      case ERROR:\n        return { ...state,\n          [key]: reducerUtils.error(action.payload)\n        };\n\n      default:\n        return state;\n    }\n  };\n};\nexport const handleAsyncPostActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return { ...state,\n          [key]: reducerUtils.loading()\n        };\n\n      case SUCCESS:\n        return { ...state,\n          [key]: reducerUtils.success(action.payload)\n        };\n\n      case ERROR:\n        return { ...state,\n          [key]: reducerUtils.error(action.payload)\n        };\n\n      default:\n        return state;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/util/async_utils.js"],"names":["createPromiseThunk","type","promiseCreator","SUCCESS","ERROR","param","dispatch","payload","e","error","reducerUtils","initial","initialData","loading","data","prevState","success","handleAsyncActions","key","state","action","handleAsyncPostActions"],"mappings":"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","sourcesContent":["export const createPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n  return (param) => async (dispatch) => {\n    dispatch({ type });\n    try {\n      const payload = await promiseCreator();\n      dispatch({ type: SUCCESS, payload });\n    } catch (e) {\n      dispatch({ type: ERROR, payload: e, error: true });\n    }\n  };\n};\n\nexport const reducerUtils = {\n  initial: (initialData = null) => ({\n    loading: false,\n    data: null,\n    error: null,\n  }),\n  loading: (prevState = null) => ({\n    loading: true,\n    data: prevState,\n    error: null,\n  }),\n  success: (payload) => ({\n    loading: false,\n    data: payload,\n    error: null,\n  }),\n  error: (error) => ({\n    loading: false,\n    data: null,\n    error: error,\n  }),\n};\n\nexport const handleAsyncActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return {\n          ...state,\n          [key]: reducerUtils.loading(),\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: reducerUtils.success(action.payload),\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: reducerUtils.error(action.payload),\n        };\n      default:\n        return state;\n    }\n  };\n};\n\nexport const handleAsyncPostActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return {\n          ...state,\n          [key]: reducerUtils.loading(),\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: reducerUtils.success(action.payload),\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: reducerUtils.error(action.payload),\n        };\n      default:\n        return state;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}