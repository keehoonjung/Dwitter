{"ast":null,"code":"import * as tweetsAPI from \"../api/tweets\";\nimport { createPromiseThunk, handleAsyncActions, handleAsyncPostActions, reducerUtils } from \"../util/async_utils\";\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\nexport const getTweets = createPromiseThunk(GET_TWEETS, tweetsAPI.getTweets);\nexport const getTweet = createPromiseThunk(GET_TWEET, tweetsAPI.getTweetById);\nexport const postTweet = (text, name, username) => async dipatch => {\n  dipatch({\n    type: POST_TWEET\n  });\n\n  try {\n    const payload = await tweetsAPI.postTweet(text, name, username);\n    dipatch({\n      type: POST_TWEET_SUCCESS,\n      payload\n    });\n  } catch (e) {\n    dipatch({\n      type: POST_TWEET_ERROR,\n      payload: e\n    });\n  }\n};\nexport const deleteTweet = id => async dispatch => {\n  try {\n    console.log(typeof id);\n    await tweetsAPI.deleteTweet(id);\n    dispatch({\n      type: DELETE_TWEET,\n      payload: id\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial()\n};\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncActions(GET_TWEETS, \"posts\")(state, action);\n\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncActions(GET_TWEET, \"post\")(state, action);\n\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return handleAsyncPostActions(POST_TWEET, \"posts\")(state, action);\n\n    case DELETE_TWEET:\n      return { ...state,\n        posts: { ...state.posts,\n          data: state.posts.data ? state.posts.data.filter(tweet => tweet.id !== action.payload) : null\n        }\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/module/tweets.js"],"names":["tweetsAPI","createPromiseThunk","handleAsyncActions","handleAsyncPostActions","reducerUtils","GET_TWEETS","GET_TWEETS_SUCCESS","GET_TWEETS_ERROR","GET_TWEET","GET_TWEET_SUCCESS","GET_TWEET_ERROR","POST_TWEET","POST_TWEET_SUCCESS","POST_TWEET_ERROR","DELETE_TWEET","UPDATE_TWEET","getTweets","getTweet","getTweetById","postTweet","text","name","username","dipatch","type","payload","e","deleteTweet","id","dispatch","console","log","initialState","posts","initial","post","tweets","state","action","data","filter","tweet"],"mappings":"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","sourcesContent":["import * as tweetsAPI from \"../api/tweets\";\nimport {\n  createPromiseThunk,\n  handleAsyncActions,\n  handleAsyncPostActions,\n  reducerUtils,\n} from \"../util/async_utils\";\n\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\n\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\n\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\n\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\n\nexport const getTweets = createPromiseThunk(GET_TWEETS, tweetsAPI.getTweets);\nexport const getTweet = createPromiseThunk(GET_TWEET, tweetsAPI.getTweetById);\n\nexport const postTweet = (text, name, username) => async (dipatch) => {\n  dipatch({ type: POST_TWEET });\n  try {\n    const payload = await tweetsAPI.postTweet(text, name, username);\n    dipatch({ type: POST_TWEET_SUCCESS, payload });\n  } catch (e) {\n    dipatch({ type: POST_TWEET_ERROR, payload: e });\n  }\n};\n\nexport const deleteTweet = (id) => async (dispatch) => {\n  try {\n    console.log(typeof id);\n    await tweetsAPI.deleteTweet(id);\n    dispatch({ type: DELETE_TWEET, payload: id });\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial(),\n};\n\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncActions(GET_TWEETS, \"posts\")(state, action);\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncActions(GET_TWEET, \"post\")(state, action);\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return handleAsyncPostActions(POST_TWEET, \"posts\")(state, action);\n    case DELETE_TWEET:\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          data: state.posts.data\n            ? state.posts.data.filter((tweet) => tweet.id !== action.payload)\n            : null,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}