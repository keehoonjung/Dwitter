{"ast":null,"code":"const url = \"http://localhost:8080/tweets\";\nexport default class TweetService {\n  constructor(http) {\n    this.getTweets = async (username = \"\") => {\n      const response = await fetch(`${url}?username=${username}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n\n      if (response.status !== 200) {\n        throw new Error(data.message);\n      }\n\n      return data;\n    };\n\n    this.getTweetsById = async id => {\n      const response = await fetch(`${url}/${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n\n      if (response.status !== 200) {\n        throw new Error(data.message);\n      }\n\n      return data;\n    };\n\n    this.postTweet = async ({\n      text,\n      name,\n      username\n    }) => {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text,\n          name,\n          username\n        })\n      });\n      const data = await response.json();\n\n      if (response.status !== 201) {\n        throw new Error(data.message);\n      }\n\n      return data;\n    };\n\n    this.deleteTweet = async id => {\n      const response = await fetch(`${url}/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (response.status !== 204) {\n        throw new Error(\"not deleted\");\n      }\n    };\n\n    this.updateTweet = async ({\n      id,\n      text\n    }) => {\n      const response = await fetch(`${url}/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      const data = response.json();\n\n      if (response.status !== 200) {\n        throw new Error(data.message);\n      }\n\n      return data;\n    };\n\n    this.http = http;\n  }\n\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/api/tweets.js"],"names":["url","TweetService","constructor","http","getTweets","username","response","fetch","method","headers","data","json","status","Error","message","getTweetsById","id","postTweet","text","name","body","JSON","stringify","deleteTweet","updateTweet"],"mappings":"AAAA,MAAMA,GAAG,GAAG,8BAAZ;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA,SAGlBC,SAHkB,GAGN,OAAOC,QAAQ,GAAG,EAAlB,KAAyB;AACnC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,GAAI,aAAYK,QAAS,EAA7B,EAAgC;AAC1DG,QAAAA,MAAM,EAAE,KADkD;AAE1DC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFiD,OAAhC,CAA5B;AAIA,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,UAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,aAAOJ,IAAP;AACD,KAbiB;;AAAA,SAelBK,aAfkB,GAeF,MAAOC,EAAP,IAAc;AAC5B,YAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,GAAI,IAAGgB,EAAG,EAAd,EAAiB;AAC3CR,QAAAA,MAAM,EAAE,KADmC;AAE3CC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFkC,OAAjB,CAA5B;AAIA,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,UAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,aAAOJ,IAAP;AACD,KAzBiB;;AAAA,SA2BlBO,SA3BkB,GA2BN,OAAO;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcd,MAAAA;AAAd,KAAP,KAAoC;AAC9C,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;AAChCQ,QAAAA,MAAM,EAAE,MADwB;AAEhCC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFuB;AAGhCW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEJ,UAAAA,IAAF;AAAQC,UAAAA,IAAR;AAAcd,UAAAA;AAAd,SAAf;AAH0B,OAAN,CAA5B;AAKA,YAAMK,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,UAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AAED,aAAOJ,IAAP;AACD,KAvCiB;;AAAA,SAyClBa,WAzCkB,GAyCJ,MAAOP,EAAP,IAAc;AAC1B,YAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,GAAI,IAAGgB,EAAG,EAAd,EAAiB;AAC3CR,QAAAA,MAAM,EAAE,QADmC;AAE3CC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAFkC,OAAjB,CAA5B;;AAIA,UAAIH,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,aAAV,CAAN;AACD;AACF,KAjDiB;;AAAA,SAmDlBW,WAnDkB,GAmDJ,OAAO;AAAER,MAAAA,EAAF;AAAME,MAAAA;AAAN,KAAP,KAAwB;AACpC,YAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,GAAI,IAAGgB,EAAG,EAAd,EAAiB;AAC3CR,QAAAA,MAAM,EAAE,KADmC;AAE3CC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFkC;AAG3CW,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBJ,UAAAA;AADmB,SAAf;AAHqC,OAAjB,CAA5B;AAOA,YAAMR,IAAI,GAAGJ,QAAQ,CAACK,IAAT,EAAb;;AACA,UAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,aAAOJ,IAAP;AACD,KAhEiB;;AAChB,SAAKP,IAAL,GAAYA,IAAZ;AACD;;AAH+B","sourcesContent":["const url = \"http://localhost:8080/tweets\";\n\nexport default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n  getTweets = async (username = \"\") => {\n    const response = await fetch(`${url}?username=${username}`, {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  };\n\n  getTweetsById = async (id) => {\n    const response = await fetch(`${url}/${id}`, {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  };\n\n  postTweet = async ({ text, name, username }) => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ text, name, username }),\n    });\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  };\n\n  deleteTweet = async (id) => {\n    const response = await fetch(`${url}/${id}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    if (response.status !== 204) {\n      throw new Error(\"not deleted\");\n    }\n  };\n\n  updateTweet = async ({ id, text }) => {\n    const response = await fetch(`${url}/${id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        text,\n      }),\n    });\n    const data = response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}