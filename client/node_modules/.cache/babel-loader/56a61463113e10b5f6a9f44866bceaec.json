{"ast":null,"code":"import TokenStorage from \"../db/token\";\nconst tokenStorage = new TokenStorage();\nconst initialToken = tokenStorage.getToken();\nconsole.log(initialToken);\nexport const createLoginPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    dispatch({\n      type\n    });\n\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e.toString()\n      });\n    }\n  };\n};\nexport const CreateIdPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    dispatch({\n      type\n    });\n\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: `Error: ${param.username} already exists`\n      });\n    }\n  };\n};\n_c = CreateIdPromiseThunk;\nexport const userReducerUtils = {\n  initial: (initialData = null) => ({\n    loading: false,\n    token: initialToken,\n    data: null,\n    error: null\n  }),\n  loading: prevToken => ({\n    loading: true,\n    token: prevToken,\n    data: null,\n    error: null\n  }),\n  login_success: payload => ({\n    loading: false,\n    token: payload.token,\n    data: payload,\n    error: null\n  }),\n  logout_success: () => ({\n    loading: false,\n    token: null,\n    data: null,\n    error: null\n  }),\n  error: error => ({\n    loading: false,\n    token: null,\n    data: null,\n    error: error\n  })\n};\nexport const userHandleAsyncActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        const token = tokenStorage.getToken();\n        return userReducerUtils.loading(token);\n\n      case SUCCESS:\n        if (key === \"login\") {\n          return userReducerUtils.login_success(action.payload);\n        } else {\n          return userReducerUtils.logout_success();\n        }\n\n      case ERROR:\n        return userReducerUtils.error(action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateIdPromiseThunk\");","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/util/user_async_utils.js"],"names":["TokenStorage","tokenStorage","initialToken","getToken","console","log","createLoginPromiseThunk","type","promiseCreator","SUCCESS","ERROR","param","dispatch","payload","e","toString","CreateIdPromiseThunk","username","userReducerUtils","initial","initialData","loading","token","data","error","prevToken","login_success","logout_success","userHandleAsyncActions","key","state","action"],"mappings":"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","sourcesContent":["import TokenStorage from \"../db/token\";\n\nconst tokenStorage = new TokenStorage();\nconst initialToken = tokenStorage.getToken();\n\nconsole.log(initialToken);\n\nexport const createLoginPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n  return (param) => async (dispatch) => {\n    dispatch({ type });\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({ type: SUCCESS, payload });\n    } catch (e) {\n      dispatch({ type: ERROR, payload: e.toString() });\n    }\n  };\n};\n\nexport const CreateIdPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (param) => async (dispatch) => {\n    dispatch({ type });\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({ type: SUCCESS, payload });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: `Error: ${param.username} already exists`,\n      });\n    }\n  };\n};\n\nexport const userReducerUtils = {\n  initial: (initialData = null) => ({\n    loading: false,\n    token: initialToken,\n    data: null,\n    error: null,\n  }),\n  loading: (prevToken) => ({\n    loading: true,\n    token: prevToken,\n    data: null,\n    error: null,\n  }),\n  login_success: (payload) => ({\n    loading: false,\n    token: payload.token,\n    data: payload,\n    error: null,\n  }),\n  logout_success: () => ({\n    loading: false,\n    token: null,\n    data: null,\n    error: null,\n  }),\n  error: (error) => ({\n    loading: false,\n    token: null,\n    data: null,\n    error: error,\n  }),\n};\n\nexport const userHandleAsyncActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        const token = tokenStorage.getToken();\n        return userReducerUtils.loading(token);\n      case SUCCESS:\n        if (key === \"login\") {\n          return userReducerUtils.login_success(action.payload);\n        } else {\n          return userReducerUtils.logout_success();\n        }\n      case ERROR:\n        return userReducerUtils.error(action.payload);\n      default:\n        return state;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}