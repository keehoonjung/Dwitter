{"ast":null,"code":"import * as tweetsAPI from \"../api/tweets\";\nimport { createPromiseThunk, handleAsyncActions, reducerUtils } from \"../util/async_utils\";\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\nexport const getTweets = createPromiseThunk(GET_TWEETS, tweetsAPI.getTweets);\nexport const getTweet = createPromiseThunk(GET_TWEET, tweetsAPI.getTweetById);\nexport const postTweet = createPromiseThunk(POST_TWEET, tweetsAPI.postTweet);\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial()\n};\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncActions(GET_TWEETS, \"posts\")(state, action);\n\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncActions(GET_TWEET, \"post\")(state, action);\n\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return state;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/module/tweets.js"],"names":["tweetsAPI","createPromiseThunk","handleAsyncActions","reducerUtils","GET_TWEETS","GET_TWEETS_SUCCESS","GET_TWEETS_ERROR","GET_TWEET","GET_TWEET_SUCCESS","GET_TWEET_ERROR","POST_TWEET","POST_TWEET_SUCCESS","POST_TWEET_ERROR","DELETE_TWEET","UPDATE_TWEET","getTweets","getTweet","getTweetById","postTweet","initialState","posts","initial","post","tweets","state","action","type"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,eAA3B;AACA,SACEC,kBADF,EAEEC,kBAFF,EAGEC,YAHF,QAIO,qBAJP;AAMA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AAEA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,MAAMC,SAAS,GAAGd,kBAAkB,CAACG,UAAD,EAAaJ,SAAS,CAACe,SAAvB,CAApC;AACP,OAAO,MAAMC,QAAQ,GAAGf,kBAAkB,CAACM,SAAD,EAAYP,SAAS,CAACiB,YAAtB,CAAnC;AAEP,OAAO,MAAMC,SAAS,GAAGjB,kBAAkB,CAACS,UAAD,EAAaV,SAAS,CAACkB,SAAvB,CAApC;AAEP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEjB,YAAY,CAACkB,OAAb,EADY;AAEnBC,EAAAA,IAAI,EAAEnB,YAAY,CAACkB,OAAb;AAFa,CAArB;AAKA,eAAe,SAASE,MAAT,CAAgBC,KAAK,GAAGL,YAAxB,EAAsCM,MAAtC,EAA8C;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKtB,UAAL;AACA,SAAKC,kBAAL;AACA,SAAKC,gBAAL;AACE,aAAOJ,kBAAkB,CAACE,UAAD,EAAa,OAAb,CAAlB,CAAwCoB,KAAxC,EAA+CC,MAA/C,CAAP;;AACF,SAAKlB,SAAL;AACA,SAAKC,iBAAL;AACA,SAAKC,eAAL;AACE,aAAOP,kBAAkB,CAACK,SAAD,EAAY,MAAZ,CAAlB,CAAsCiB,KAAtC,EAA6CC,MAA7C,CAAP;;AACF,SAAKf,UAAL;AACA,SAAKC,kBAAL;AACA,SAAKC,gBAAL;AACE,aAAOY,KAAP;;AACF;AACE,aAAOA,KAAP;AAdJ;AAgBD","sourcesContent":["import * as tweetsAPI from \"../api/tweets\";\nimport {\n  createPromiseThunk,\n  handleAsyncActions,\n  reducerUtils,\n} from \"../util/async_utils\";\n\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\n\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\n\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\n\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\n\nexport const getTweets = createPromiseThunk(GET_TWEETS, tweetsAPI.getTweets);\nexport const getTweet = createPromiseThunk(GET_TWEET, tweetsAPI.getTweetById);\n\nexport const postTweet = createPromiseThunk(POST_TWEET, tweetsAPI.postTweet);\n\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial(),\n};\n\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncActions(GET_TWEETS, \"posts\")(state, action);\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncActions(GET_TWEET, \"post\")(state, action);\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return state;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}