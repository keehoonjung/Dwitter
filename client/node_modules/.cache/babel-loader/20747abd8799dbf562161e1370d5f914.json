{"ast":null,"code":"import { tweetsPromiseThunk, tweetPromiseThunkById, handleAsyncDeleteTweetActions, handleAsyncGetTweetsActions, handleAsyncPostTweetActions, handleAsyncUpdateTweetActions, tweetsReducerUtils } from \"../util/tweets_async_utils\";\nimport HttpClient from \"../network/http\";\nimport TweetService from \"../api/tweets\";\nimport TokenStorage from \"../db/token\";\nconst baseUrl = \"http://localhost:8080\";\nconst httpClient = new HttpClient(baseUrl);\nconst tokenStorage = new TokenStorage();\nconst tweetService = new TweetService(httpClient, tokenStorage);\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst DELETE_TWEET_SUCCESS = \"DELETE_TWEET_SUCCESS\";\nconst DELETE_TWEET_ERROR = \"DELETE_TWEET_ERROR\";\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\nconst UPDATE_TWEET_SUCCESS = \"UPDATE_TWEET_SUCCESS\";\nconst UPDATE_TWEET_ERROR = \"UPDATE_TWEET_ERROR\";\nexport const getTweets = tweetsPromiseThunk(GET_TWEETS, tweetService.getTweets);\nexport const getTweet = tweetPromiseThunkById(GET_TWEET, tweetService.getTweetsById);\nexport const postTweet = tweetsPromiseThunk(POST_TWEET, tweetService.postTweet);\nexport const deleteTweet = tweetPromiseThunkById(DELETE_TWEET, tweetService.deleteTweet);\nexport const updateTweet = tweetPromiseThunkById(UPDATE_TWEET, tweetService.updateTweet, param => param.id);\nconst initialState = {\n  posts: tweetsReducerUtils.initial(),\n  post: tweetsReducerUtils.initial()\n};\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncGetTweetsActions(GET_TWEETS, \"posts\")(state, action);\n\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncGetTweetsActions(GET_TWEET, \"posts\")(state, action);\n\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return handleAsyncPostTweetActions(POST_TWEET, \"posts\")(state, action);\n\n    case DELETE_TWEET:\n    case DELETE_TWEET_SUCCESS:\n    case DELETE_TWEET_ERROR:\n      console.log(action.neta);\n      return handleAsyncDeleteTweetActions(DELETE_TWEET, \"delete\")(state, action);\n\n    case UPDATE_TWEET:\n    case UPDATE_TWEET_SUCCESS:\n    case UPDATE_TWEET_ERROR:\n      return handleAsyncUpdateTweetActions(UPDATE_TWEET, \"update\")(state, action);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/module/tweets.js"],"names":["tweetsPromiseThunk","tweetPromiseThunkById","handleAsyncDeleteTweetActions","handleAsyncGetTweetsActions","handleAsyncPostTweetActions","handleAsyncUpdateTweetActions","tweetsReducerUtils","HttpClient","TweetService","TokenStorage","baseUrl","httpClient","tokenStorage","tweetService","GET_TWEETS","GET_TWEETS_SUCCESS","GET_TWEETS_ERROR","GET_TWEET","GET_TWEET_SUCCESS","GET_TWEET_ERROR","POST_TWEET","POST_TWEET_SUCCESS","POST_TWEET_ERROR","DELETE_TWEET","DELETE_TWEET_SUCCESS","DELETE_TWEET_ERROR","UPDATE_TWEET","UPDATE_TWEET_SUCCESS","UPDATE_TWEET_ERROR","getTweets","getTweet","getTweetsById","postTweet","deleteTweet","updateTweet","param","id","initialState","posts","initial","post","tweets","state","action","type","console","log","neta"],"mappings":"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","sourcesContent":["import {\n  tweetsPromiseThunk,\n  tweetPromiseThunkById,\n  handleAsyncDeleteTweetActions,\n  handleAsyncGetTweetsActions,\n  handleAsyncPostTweetActions,\n  handleAsyncUpdateTweetActions,\n  tweetsReducerUtils,\n} from \"../util/tweets_async_utils\";\n\nimport HttpClient from \"../network/http\";\nimport TweetService from \"../api/tweets\";\nimport TokenStorage from \"../db/token\";\n\nconst baseUrl = \"http://localhost:8080\";\nconst httpClient = new HttpClient(baseUrl);\nconst tokenStorage = new TokenStorage();\nconst tweetService = new TweetService(httpClient, tokenStorage);\n\nconst GET_TWEETS = \"GET_TWEETS\";\nconst GET_TWEETS_SUCCESS = \"GET_TWEETS_SUCCESS\";\nconst GET_TWEETS_ERROR = \"GET_TWEETS_ERROR\";\n\nconst GET_TWEET = \"GET_TWEET\";\nconst GET_TWEET_SUCCESS = \"GET_TWEET_SUCCESS\";\nconst GET_TWEET_ERROR = \"GET_TWEET_ERROR\";\n\nconst POST_TWEET = \"POST_TWEET\";\nconst POST_TWEET_SUCCESS = \"POST_TWEET_SUCCESS\";\nconst POST_TWEET_ERROR = \"POST_TWEET_ERROR\";\n\nconst DELETE_TWEET = \"DELETE_TWEET\";\nconst DELETE_TWEET_SUCCESS = \"DELETE_TWEET_SUCCESS\";\nconst DELETE_TWEET_ERROR = \"DELETE_TWEET_ERROR\";\n\nconst UPDATE_TWEET = \"UPDATE_TWEET\";\nconst UPDATE_TWEET_SUCCESS = \"UPDATE_TWEET_SUCCESS\";\nconst UPDATE_TWEET_ERROR = \"UPDATE_TWEET_ERROR\";\n\nexport const getTweets = tweetsPromiseThunk(GET_TWEETS, tweetService.getTweets);\nexport const getTweet = tweetPromiseThunkById(\n  GET_TWEET,\n  tweetService.getTweetsById\n);\nexport const postTweet = tweetsPromiseThunk(POST_TWEET, tweetService.postTweet);\nexport const deleteTweet = tweetPromiseThunkById(\n  DELETE_TWEET,\n  tweetService.deleteTweet\n);\nexport const updateTweet = tweetPromiseThunkById(\n  UPDATE_TWEET,\n  tweetService.updateTweet,\n  (param) => param.id\n);\n\nconst initialState = {\n  posts: tweetsReducerUtils.initial(),\n  post: tweetsReducerUtils.initial(),\n};\n\nexport default function tweets(state = initialState, action) {\n  switch (action.type) {\n    case GET_TWEETS:\n    case GET_TWEETS_SUCCESS:\n    case GET_TWEETS_ERROR:\n      return handleAsyncGetTweetsActions(GET_TWEETS, \"posts\")(state, action);\n    case GET_TWEET:\n    case GET_TWEET_SUCCESS:\n    case GET_TWEET_ERROR:\n      return handleAsyncGetTweetsActions(GET_TWEET, \"posts\")(state, action);\n    case POST_TWEET:\n    case POST_TWEET_SUCCESS:\n    case POST_TWEET_ERROR:\n      return handleAsyncPostTweetActions(POST_TWEET, \"posts\")(state, action);\n    case DELETE_TWEET:\n    case DELETE_TWEET_SUCCESS:\n    case DELETE_TWEET_ERROR:\n      console.log(action.neta);\n      return handleAsyncDeleteTweetActions(DELETE_TWEET, \"delete\")(\n        state,\n        action\n      );\n    case UPDATE_TWEET:\n    case UPDATE_TWEET_SUCCESS:\n    case UPDATE_TWEET_ERROR:\n      return handleAsyncUpdateTweetActions(UPDATE_TWEET, \"update\")(\n        state,\n        action\n      );\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}