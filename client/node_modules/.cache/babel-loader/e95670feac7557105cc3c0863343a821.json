{"ast":null,"code":"import { configureStore, createSlice } from \"@reduxjs/toolkit\";\nconst userData = {\n  JK: {\n    name: \"JK\",\n    useranme: \"JK\",\n    url: \"https://res.cloudinary.com/dpvhkp8oq/image/upload/v1632646994/Motion/moxvxyhmceuumjye3lth.jpg\"\n  },\n  song: {\n    name: \"songsong\",\n    useranme: \"song\",\n    url: \"https://res.cloudinary.com/dpvhkp8oq/image/upload/v1632646994/Motion/moxvxyhmceuumjye3lth.jpg\"\n  }\n};\nconst tweetData = fetch(\"http://localhost:8080/tweets\") //\n.then(response => {\n  console.log(response.json());\n}); // [\n//   {\n//     id: \"12345\",\n//     text: \"Hello\",\n//     createdAt: Date.now(),\n//     name: \"JK\",\n//     useranme: \"SONG\",\n//     url: \"https://res.cloudinary.com/dpvhkp8oq/image/upload/v1632646994/Motion/moxvxyhmceuumjye3lth.jpg\",\n//   },\n// ];\n\nconst tweetsSlice = createSlice({\n  name: \"Tweets\",\n  initialState: {\n    user: userData,\n    data: []\n  },\n  reducers: {\n    postTweet: (state, action) => {\n      const tweet = action.payload;\n      console.log(tweetData);\n      state.data.unshift(tweet);\n    },\n    deleteTweet: (state, action) => {\n      state.data.splice(action.payload, 1);\n    },\n    getTweets: (state, action) => {\n      state.data = state.data.filter(data => {\n        return data.useranme === action.payload;\n      });\n    },\n    updateTweets: (state, action) => {\n      state.data[action.payload.index].text = action.payload.text;\n    }\n  }\n});\nconst dataStore = configureStore({\n  reducer: tweetsSlice.reducer\n});\nexport const {\n  postTweet,\n  deleteTweet,\n  getTweets,\n  updateTweets\n} = tweetsSlice.actions;\nexport default dataStore;","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/service/store.tsx"],"names":["configureStore","createSlice","userData","JK","name","useranme","url","song","tweetData","fetch","then","response","console","log","json","tweetsSlice","initialState","user","data","reducers","postTweet","state","action","tweet","payload","unshift","deleteTweet","splice","getTweets","filter","updateTweets","index","text","dataStore","reducer","actions"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AA0CA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,EAAE,EAAE;AACFC,IAAAA,IAAI,EAAE,IADJ;AAEFC,IAAAA,QAAQ,EAAE,IAFR;AAGFC,IAAAA,GAAG,EAAE;AAHH,GADW;AAMfC,EAAAA,IAAI,EAAE;AACJH,IAAAA,IAAI,EAAE,UADF;AAEJC,IAAAA,QAAQ,EAAE,MAFN;AAGJC,IAAAA,GAAG,EAAE;AAHD;AANS,CAAjB;AAaA,MAAME,SAAS,GAAGC,KAAK,CAAC,8BAAD,CAAL,CAAsC;AAAtC,CACfC,IADe,CACTC,QAAD,IAAc;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,EAAZ;AACD,CAHe,CAAlB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAGd,WAAW,CAAC;AAC9BG,EAAAA,IAAI,EAAE,QADwB;AAE9BY,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAEf,QADM;AAEZgB,IAAAA,IAAI,EAAE;AAFM,GAFgB;AAM9BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAqBC,MAArB,KAAiD;AAC1D,YAAMC,KAAK,GAAGD,MAAM,CAACE,OAArB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAa,MAAAA,KAAK,CAACH,IAAN,CAAWO,OAAX,CAAmBF,KAAnB;AACD,KALO;AAMRG,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAqBC,MAArB,KAAmD;AAC9DD,MAAAA,KAAK,CAACH,IAAN,CAAWS,MAAX,CAAkBL,MAAM,CAACE,OAAzB,EAAkC,CAAlC;AACD,KARO;AASRI,IAAAA,SAAS,EAAE,CAACP,KAAD,EAAqBC,MAArB,KAAgD;AACzDD,MAAAA,KAAK,CAACH,IAAN,GAAaG,KAAK,CAACH,IAAN,CAAWW,MAAX,CAAmBX,IAAD,IAAU;AACvC,eAAOA,IAAI,CAACb,QAAL,KAAkBiB,MAAM,CAACE,OAAhC;AACD,OAFY,CAAb;AAGD,KAbO;AAcRM,IAAAA,YAAY,EAAE,CAACT,KAAD,EAAqBC,MAArB,KAAmD;AAC/DD,MAAAA,KAAK,CAACH,IAAN,CAAWI,MAAM,CAACE,OAAP,CAAeO,KAA1B,EAAiCC,IAAjC,GAAwCV,MAAM,CAACE,OAAP,CAAeQ,IAAvD;AACD;AAhBO;AANoB,CAAD,CAA/B;AA0BA,MAAMC,SAAS,GAAGjC,cAAc,CAAC;AAAEkC,EAAAA,OAAO,EAAEnB,WAAW,CAACmB;AAAvB,CAAD,CAAhC;AAEA,OAAO,MAAM;AAAEd,EAAAA,SAAF;AAAaM,EAAAA,WAAb;AAA0BE,EAAAA,SAA1B;AAAqCE,EAAAA;AAArC,IACXf,WAAW,CAACoB,OADP;AAGP,eAAeF,SAAf","sourcesContent":["import { configureStore, createSlice } from \"@reduxjs/toolkit\";\n\nexport type TweetType = {\n  id: string;\n  createdAt: number;\n  text: string;\n  name: string;\n  useranme: string;\n  url: string;\n};\n\nexport type UserType = {\n  name: string;\n  useranme: string;\n  url: string;\n};\n\nexport type TweetsState = {\n  user: { [username: string]: UserType };\n  data: TweetType[];\n};\n\ntype postTweetAction = {\n  type: string;\n  payload: TweetType;\n};\n\ntype deleteTweetAction = {\n  type: string;\n  payload: number;\n};\n\ntype getTweetAction = {\n  type: string;\n  payload: string;\n};\n\ntype updateTweetAction = {\n  type: string;\n  payload: { index: number; text: string };\n};\n\nconst userData = {\n  JK: {\n    name: \"JK\",\n    useranme: \"JK\",\n    url: \"https://res.cloudinary.com/dpvhkp8oq/image/upload/v1632646994/Motion/moxvxyhmceuumjye3lth.jpg\",\n  },\n  song: {\n    name: \"songsong\",\n    useranme: \"song\",\n    url: \"https://res.cloudinary.com/dpvhkp8oq/image/upload/v1632646994/Motion/moxvxyhmceuumjye3lth.jpg\",\n  },\n};\n\nconst tweetData = fetch(\"http://localhost:8080/tweets\") //\n  .then((response) => {\n    console.log(response.json());\n  });\n\n// [\n//   {\n//     id: \"12345\",\n//     text: \"Hello\",\n//     createdAt: Date.now(),\n//     name: \"JK\",\n//     useranme: \"SONG\",\n//     url: \"https://res.cloudinary.com/dpvhkp8oq/image/upload/v1632646994/Motion/moxvxyhmceuumjye3lth.jpg\",\n//   },\n// ];\n\nconst tweetsSlice = createSlice({\n  name: \"Tweets\",\n  initialState: {\n    user: userData,\n    data: [],\n  },\n  reducers: {\n    postTweet: (state: TweetsState, action: postTweetAction) => {\n      const tweet = action.payload;\n      console.log(tweetData);\n      state.data.unshift(tweet);\n    },\n    deleteTweet: (state: TweetsState, action: deleteTweetAction) => {\n      state.data.splice(action.payload, 1);\n    },\n    getTweets: (state: TweetsState, action: getTweetAction) => {\n      state.data = state.data.filter((data) => {\n        return data.useranme === action.payload;\n      });\n    },\n    updateTweets: (state: TweetsState, action: updateTweetAction) => {\n      state.data[action.payload.index].text = action.payload.text;\n    },\n  },\n});\n\nconst dataStore = configureStore({ reducer: tweetsSlice.reducer });\n\nexport const { postTweet, deleteTweet, getTweets, updateTweets } =\n  tweetsSlice.actions;\n\nexport default dataStore;\n"]},"metadata":{},"sourceType":"module"}