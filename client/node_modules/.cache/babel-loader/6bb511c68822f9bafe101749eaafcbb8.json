{"ast":null,"code":"import { createUser, getUser } from \"../api/users\";\nconst LOGIN_ID = \"LOGIN_ID\";\nconst LOGIN_ID_SUCCESS = \"LOGIN_ID_SUCCESS\";\nconst LOGIN_ID_ERROR = \"LOGIN_ID_ERROR\";\nconst LOGOUT_ID = \"LOGOUT_ID\";\nconst LOGOUT_ID_SUCCESS = \"LOGOUT_ID_SUCCESS\";\nconst LOGOUT_ID_ERROR = \"LOGOUT_ID_ERROR\";\nconst CREATE_ID = \"CREATE_ID\";\nconst CREATE_ID_SUCCESS = \"CREATE_ID_SUCCESS\";\nconst CREATE_ID_ERROR = \"CREATE_ID_ERROR\";\nexport const loginId = (id, password) => async dispatch => {\n  dispatch({\n    type: LOGIN_ID\n  });\n\n  try {\n    const user = await getUser(id);\n\n    if (!user) {\n      return dispatch({\n        type: LOGIN_ID_ERROR,\n        payload: \"Error: Invalid user or password fail\"\n      });\n    } else {\n      user.password === password ? dispatch({\n        type: LOGIN_ID_SUCCESS,\n        payload: user\n      }) : dispatch({\n        type: LOGIN_ID_ERROR,\n        payload: \"Error: Invalid user or password fail\"\n      });\n    }\n  } catch (e) {\n    dispatch({\n      type: LOGIN_ID_ERROR,\n      payload: e.string()\n    });\n  }\n};\nexport const logoutId = () => dipatch => {\n  dipatch({\n    type: LOGOUT_ID\n  });\n\n  try {\n    dipatch({\n      type: LOGOUT_ID_SUCCESS\n    });\n  } catch (e) {\n    dipatch({\n      type: LOGOUT_ID_ERROR,\n      payload: e\n    });\n  }\n};\nexport const createId = (username, password, name, email, url) => async dipatch => {\n  dipatch({\n    type: CREATE_ID\n  });\n\n  if (password.length < 5) {\n    return dipatch({\n      type: CREATE_ID_ERROR,\n      payload: \"Error: password should be at least 5 characters\"\n    });\n  }\n\n  const user = await getUser(username);\n\n  if (user) {\n    return dipatch({\n      type: CREATE_ID_ERROR,\n      payload: `Error: ${user.username} already exists`\n    });\n  }\n\n  try {\n    const payload = await createUser({\n      username,\n      password,\n      name,\n      email,\n      url\n    });\n    dipatch({\n      type: CREATE_ID_SUCCESS,\n      payload\n    });\n  } catch (e) {\n    dipatch({\n      type: CREATE_ID_ERROR,\n      payload: e\n    });\n  }\n};\nconst initialState = {\n  user: {\n    loading: false,\n    login: false,\n    data: null,\n    error: null\n  }\n};\nexport default function users(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_ID:\n      return {\n        user: { ...state.user,\n          loading: true\n        }\n      };\n\n    case LOGIN_ID_SUCCESS:\n      return {\n        user: {\n          loading: false,\n          login: true,\n          data: action.payload,\n          error: null\n        }\n      };\n\n    case LOGIN_ID_ERROR:\n      return {\n        user: { ...state.user,\n          loading: false,\n          error: action.payload\n        }\n      };\n\n    case LOGOUT_ID:\n      return {\n        user: { ...state.user,\n          loading: true\n        }\n      };\n\n    case LOGOUT_ID_SUCCESS:\n      return {\n        user: { ...state.user,\n          loading: false,\n          login: false,\n          data: null\n        }\n      };\n\n    case LOGOUT_ID_ERROR:\n      return {\n        user: { ...state.user,\n          loading: false,\n          error: action.payload\n        }\n      };\n\n    case CREATE_ID:\n      return {\n        user: { ...state.user,\n          loading: true\n        }\n      };\n\n    case CREATE_ID_SUCCESS:\n      return {\n        user: {\n          loading: false,\n          login: true,\n          data: action.payload,\n          error: null\n        }\n      };\n\n    case CREATE_ID_ERROR:\n      return {\n        user: { ...state.user,\n          loading: false,\n          error: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/module/users.js"],"names":["createUser","getUser","LOGIN_ID","LOGIN_ID_SUCCESS","LOGIN_ID_ERROR","LOGOUT_ID","LOGOUT_ID_SUCCESS","LOGOUT_ID_ERROR","CREATE_ID","CREATE_ID_SUCCESS","CREATE_ID_ERROR","loginId","id","password","dispatch","type","user","payload","e","string","logoutId","dipatch","createId","username","name","email","url","length","initialState","loading","login","data","error","users","state","action"],"mappings":"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","sourcesContent":["import { createUser, getUser } from \"../api/users\";\n\nconst LOGIN_ID = \"LOGIN_ID\";\nconst LOGIN_ID_SUCCESS = \"LOGIN_ID_SUCCESS\";\nconst LOGIN_ID_ERROR = \"LOGIN_ID_ERROR\";\n\nconst LOGOUT_ID = \"LOGOUT_ID\";\nconst LOGOUT_ID_SUCCESS = \"LOGOUT_ID_SUCCESS\";\nconst LOGOUT_ID_ERROR = \"LOGOUT_ID_ERROR\";\n\nconst CREATE_ID = \"CREATE_ID\";\nconst CREATE_ID_SUCCESS = \"CREATE_ID_SUCCESS\";\nconst CREATE_ID_ERROR = \"CREATE_ID_ERROR\";\n\nexport const loginId = (id, password) => async (dispatch) => {\n  dispatch({ type: LOGIN_ID });\n  try {\n    const user = await getUser(id);\n    if (!user) {\n      return dispatch({\n        type: LOGIN_ID_ERROR,\n        payload: \"Error: Invalid user or password fail\",\n      });\n    } else {\n      user.password === password\n        ? dispatch({ type: LOGIN_ID_SUCCESS, payload: user })\n        : dispatch({\n            type: LOGIN_ID_ERROR,\n            payload: \"Error: Invalid user or password fail\",\n          });\n    }\n  } catch (e) {\n    dispatch({\n      type: LOGIN_ID_ERROR,\n      payload: e.string(),\n    });\n  }\n};\n\nexport const logoutId = () => (dipatch) => {\n  dipatch({ type: LOGOUT_ID });\n  try {\n    dipatch({ type: LOGOUT_ID_SUCCESS });\n  } catch (e) {\n    dipatch({ type: LOGOUT_ID_ERROR, payload: e });\n  }\n};\n\nexport const createId =\n  (username, password, name, email, url) => async (dipatch) => {\n    dipatch({ type: CREATE_ID });\n    if (password.length < 5) {\n      return dipatch({\n        type: CREATE_ID_ERROR,\n        payload: \"Error: password should be at least 5 characters\",\n      });\n    }\n    const user = await getUser(username);\n    if (user) {\n      return dipatch({\n        type: CREATE_ID_ERROR,\n        payload: `Error: ${user.username} already exists`,\n      });\n    }\n    try {\n      const payload = await createUser({\n        username,\n        password,\n        name,\n        email,\n        url,\n      });\n      dipatch({ type: CREATE_ID_SUCCESS, payload });\n    } catch (e) {\n      dipatch({\n        type: CREATE_ID_ERROR,\n        payload: e,\n      });\n    }\n  };\n\nconst initialState = {\n  user: {\n    loading: false,\n    login: false,\n    data: null,\n    error: null,\n  },\n};\n\nexport default function users(state = initialState, action) {\n  switch (action.type) {\n    case LOGIN_ID:\n      return {\n        user: {\n          ...state.user,\n          loading: true,\n        },\n      };\n    case LOGIN_ID_SUCCESS:\n      return {\n        user: {\n          loading: false,\n          login: true,\n          data: action.payload,\n          error: null,\n        },\n      };\n    case LOGIN_ID_ERROR:\n      return {\n        user: {\n          ...state.user,\n          loading: false,\n          error: action.payload,\n        },\n      };\n    case LOGOUT_ID:\n      return {\n        user: {\n          ...state.user,\n          loading: true,\n        },\n      };\n    case LOGOUT_ID_SUCCESS:\n      return {\n        user: {\n          ...state.user,\n          loading: false,\n          login: false,\n          data: null,\n        },\n      };\n    case LOGOUT_ID_ERROR:\n      return {\n        user: {\n          ...state.user,\n          loading: false,\n          error: action.payload,\n        },\n      };\n    case CREATE_ID:\n      return {\n        user: {\n          ...state.user,\n          loading: true,\n        },\n      };\n    case CREATE_ID_SUCCESS:\n      return {\n        user: {\n          loading: false,\n          login: true,\n          data: action.payload,\n          error: null,\n        },\n      };\n    case CREATE_ID_ERROR:\n      return {\n        user: {\n          ...state.user,\n          loading: false,\n          error: action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}