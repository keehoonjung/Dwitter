{"ast":null,"code":"export const createLoginPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    console.log(param);\n    dispatch({\n      type\n    });\n\n    try {\n      const user = await promiseCreator(param.id);\n\n      if (!user) {\n        return dispatch({\n          type: ERROR,\n          payload: \"Error: Invalid user or password fail\"\n        });\n      } else {\n        user.password === param.password ? dispatch({\n          type: SUCCESS,\n          payload: user\n        }) : dispatch({\n          type: ERROR,\n          payload: \"Error: Invalid user or password fail\"\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e.toString()\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/keehoonjung/projects/react/dwitter/client/src/util/user_async_utils.js"],"names":["createLoginPromiseThunk","type","promiseCreator","SUCCESS","ERROR","param","dispatch","console","log","user","id","payload","password","e","toString"],"mappings":"AAAA,OAAO,MAAMA,uBAAuB,GAAG,CAACC,IAAD,EAAOC,cAAP,KAA0B;AAC/D,QAAM,CAACC,OAAD,EAAUC,KAAV,IAAmB,CAAE,GAAEH,IAAK,UAAT,EAAqB,GAAEA,IAAK,QAA5B,CAAzB;AAEA,SAAQI,KAAD,IAAW,MAAOC,QAAP,IAAoB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAC,IAAAA,QAAQ,CAAC;AAAEL,MAAAA;AAAF,KAAD,CAAR;;AACA,QAAI;AACF,YAAMQ,IAAI,GAAG,MAAMP,cAAc,CAACG,KAAK,CAACK,EAAP,CAAjC;;AACA,UAAI,CAACD,IAAL,EAAW;AACT,eAAOH,QAAQ,CAAC;AACdL,UAAAA,IAAI,EAAEG,KADQ;AAEdO,UAAAA,OAAO,EAAE;AAFK,SAAD,CAAf;AAID,OALD,MAKO;AACLF,QAAAA,IAAI,CAACG,QAAL,KAAkBP,KAAK,CAACO,QAAxB,GACIN,QAAQ,CAAC;AAAEL,UAAAA,IAAI,EAAEE,OAAR;AAAiBQ,UAAAA,OAAO,EAAEF;AAA1B,SAAD,CADZ,GAEIH,QAAQ,CAAC;AACPL,UAAAA,IAAI,EAAEG,KADC;AAEPO,UAAAA,OAAO,EAAE;AAFF,SAAD,CAFZ;AAMD;AACF,KAfD,CAeE,OAAOE,CAAP,EAAU;AACVP,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAEG,KAAR;AAAeO,QAAAA,OAAO,EAAEE,CAAC,CAACC,QAAF;AAAxB,OAAD,CAAR;AACD;AACF,GArBD;AAsBD,CAzBM","sourcesContent":["export const createLoginPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n  return (param) => async (dispatch) => {\n    console.log(param);\n    dispatch({ type });\n    try {\n      const user = await promiseCreator(param.id);\n      if (!user) {\n        return dispatch({\n          type: ERROR,\n          payload: \"Error: Invalid user or password fail\",\n        });\n      } else {\n        user.password === param.password\n          ? dispatch({ type: SUCCESS, payload: user })\n          : dispatch({\n              type: ERROR,\n              payload: \"Error: Invalid user or password fail\",\n            });\n      }\n    } catch (e) {\n      dispatch({ type: ERROR, payload: e.toString() });\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}